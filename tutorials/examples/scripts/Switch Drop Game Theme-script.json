{
  "settings": {},
  "executionScript": "logger.log('Received trigger', triggerPayload, triggerPayload.overrides);\n\nlet themeToSwitch = 'random';\n\nconst twitchCommandText = (triggerPayload.byTwitch?.message ?? '');\n\nif (twitchCommandText) {\n  const textAfterTheCommand = twitchCommandText.replace(variables.chatCommandText.trim(), '').trim();\n\n  if (textAfterTheCommand) {\n    themeToSwitch = textAfterTheCommand;\n  }\n}\n\nlogger.log('Chose Theme to Switch', themeToSwitch);\n\nif (!bootstrap.isValidTheme(themeToSwitch)) {\n  return;\n}\n\nbootstrap.switchToTheme(themeToSwitch);\n",
  "bootstrapScript": "const themesAsArray = variables.themeList.split('\\n');\n\nlogger.log({\n  themesAsArray\n});\n\nfunction randomDropTheme () {\n  return utils.randomElement(themesAsArray);\n}\n\nconst urlBase = 'https://www.pixelplush.dev/parachute/';\n\nfunction isValidTheme (themeToSwitch) {\n  return themesAsArray.includes(themeToSwitch) || themeToSwitch === 'random';\n}\n\nasync function switchToTheme(themeToSwitch) {\n  if (themeToSwitch === 'random') {\n    themeToSwitch = randomDropTheme();\n  }\n  \n  const urlToSwitchTo = `${urlBase}${themeToSwitch}.html?${variables.queryArguments}`;\n\n  // update the obs url of a browsersource todo\n\n  logger.log('Switching to URL', urlToSwitchTo);\n\n  await obs.replaceBrowserSourceUrl(variables.obsBrowserSource,  urlToSwitchTo);\n}\n\n\nreturn { randomDropTheme, switchToTheme, isValidTheme };\n",
  "variablesConfig": [
    {
      "hint": "Each theme is a new line (no need to for the .html part)",
      "name": "themeList",
      "fallback": "winter\neaster",
      "type": "textarea"
    },
    {
      "hint": "All important argument you need to apply to the dropgame",
      "name": "queryArguments",
      "fallback": "channel=&overlay=true&clouds=true&hideTilDrop=true&volume=25&cooldown=90000&commandOn=true&oauth=&droplets=true",
      "type": "text"
    },
    {
      "hint": "Name inside OBS where the Dropgame is currently added",
      "name": "obsBrowserSource",
      "fallback": "",
      "type": "text"
    },
    {
      "hint": "The Name of the Twitch-Trigger to get find the right theme",
      "name": "chatCommandText",
      "fallback": "",
      "type": "text"
    }
  ]
}

# This is a basic workflow to help you get started with Actions

name: Nightly build of develop

on:
  schedule:
    - cron: 0 4 * * *
  workflow_dispatch:
    inputs:

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest

    # Map a step output to a job output
    outputs:
      uploadURL: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: develop
      # Create Tag by https://stackoverflow.com/a/64970393
      - name: Checkout nightly build-repo
        uses: actions/checkout@v2
        with:
          repository: negue/meme-box-nightly
          path: nightly_repo
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo:
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Get current date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=TAG_NAME::nightly${date}"
          echo "::set-output name=RELEASE_NAME::nightly-release-${date}"

      - name: Get current time
        uses: gerred/actions/current-time@master
        id: current-time
      - name: Create version_info.json
        uses: schdck/create-env-json@v1
        id: create-env
        with:
          file-name: './src/version_info.json'
          VERSION_TAG: ${{ steps.vars.outputs.TAG_NAME }}
          COMMIT: ${{ steps.vars.outputs.sha_short }}
          BUILD_TIME: ${{ steps.current-time.outputs.time }}
          BRANCH: ${{ steps.vars.outputs.branch }}

      - name: Create last_commit.json
        uses: schdck/create-env-json@v1
        id: create-last-commit
        with:
          file-name: './nightly_repo/last_commit.json'
          VERSION_TAG: ${{ steps.vars.outputs.TAG_NAME }}
          COMMIT: ${{ steps.vars.outputs.sha_short }}

      - run: npm install
      - run: npm run build:prepare
      - run: npm run build:all

      - name: Uploading Angular Dist Files
        uses: actions/upload-artifact@v2
        with:
          name: angular-dist
          path: dist

      - run: npm run electron:build:only

      - name: Create tag in public repository
        run: |
          cd ${{github.workspace}}/nightly_repo
          git tag ${{ steps.vars.outputs.TAG_NAME }}

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Commit last_commit.json
          directory: nightly_repo

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.NIGHTLY_TOKEN }}
          branch: main
          directory: nightly_repo
          tags: true
          repository: negue/meme-box-nightly

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          tag_name: ${{ steps.vars.outputs.TAG_NAME }}
          release_name: ${{ steps.vars.outputs.RELEASE_NAME }}
          draft: false
          prerelease:  true
          commitish: main
          repo: meme-box-nightly

      - name: Upload Release Asset Windows Headless
        id: upload-release-asset-exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox.exe
          asset_name: memebox-headless.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload Release Asset Linux Headless
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox-linux
          asset_name: memebox-linux-headless
          asset_content_type: application/octet-stream


      - name: Upload Release Asset Mac Headless
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release/out/memebox-macos
          asset_name: memebox-macos-headless
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Linux Electron
        id: upload-release-asset-linux-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release-electron/memebox-electron.AppImage
          asset_name: memebox-electron.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Streamdeck Plugin
        id: upload-streamdeck-plugin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./memebox-streamdeck/Release/com.memebox.memebox-streamdeck.streamDeckPlugin
          asset_name: com.memebox.memebox-streamdeck.streamDeckPlugin
          asset_content_type: application/octet-stream

  windows:
    name: Build and Upload Windows Electron
    needs: build

    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2

      - run: npm install

      - name: Download Angular Output from build
        uses: actions/download-artifact@v2
        with:
          name: angular-dist
          path: dist

      - run: npm run electron:build:only

      - name: Upload Release Asset Windows Electron
        id: upload-release-asset-windows-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.uploadURL }}
          asset_path: ./release-electron/memebox-electron.exe
          asset_name: memebox-windows-electron.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Windows Electron ZIP
        id: upload-release-asset-windows-electron-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.uploadURL }}
          asset_path: ./release-electron/memebox-electron.zip
          asset_name: memebox-windows-electron.zip
          asset_content_type: application/zip

  mac:
    name: Build and Upload MacOS Electron
    runs-on: macos-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2

      - run: npm install

      - name: Download Angular Output from build
        uses: actions/download-artifact@v2
        with:
          name: angular-dist
          path: dist

      - run: npm run electron:build:only

      - name: Upload Release Asset Mac Electron
        id: upload-release-asset-Mac-electron
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.NIGHTLY_TOKEN }}
        with:
          upload_url: ${{ needs.build.outputs.uploadURL }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release-electron/memebox-electron.dmg
          asset_name: memebox-mac-electron.dmg
          asset_content_type: application/octet-stream
